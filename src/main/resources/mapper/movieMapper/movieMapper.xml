<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.whychapedia.mapper.MovieMapper">

  <!--서로 다른 영화 아이디가 담긴 list를 받아서 해당 영화 # 개 넣기 (불러올 영화 번호를 알고 있는 상태)-->
  <select id="selectTopMovie" resultType="com.whychapedia.vo.MovieVo">
        SELECT * FROM movie WHERE id IN (
            <foreach collection="topMovieIdList" item="movieId" separator=",">
                #{movieId}
            </foreach>
        )
  </select>
  
  <!--감독 아이디로 해당 감독 영화 받아오기 	 -->
  <select id="selectAllMovieofTheDirector" resultType="com.whychapedia.vo.MovieVo">
        SELECT m.*
			FROM movie m
			JOIN movie_director md
			ON m.ID = md.MOVIE_ID
			WHERE md.director_id = #{theDirectorId}
  </select>
  
  <!--영화 평점 높은 순으로 #개 영화 들고오기-->
  <select id="selectTopRateMovieList" resultType="com.whychapedia.vo.MovieVo">
		SELECT *
		FROM (
		SELECT *
		FROM movie
		ORDER BY movie_rating DESC
		)
		WHERE ROWNUM &lt;= #{movie_num}
  </select>
  
   <!--컬렉션_영화vo 가져와서 해당 영화 정보 모두 가져오기 (list) -->
  <select id="selectMovieInCollectionList" resultType="com.whychapedia.vo.MovieVo">
		SELECT * FROM movie WHERE id IN (
            <foreach collection="movieCollectionVoList" item="movieCollectionVo" separator=",">
                #{movieCollectionVo.movie_id}
            </foreach>
        ) 
  </select>
  
     <!--컬렉션_영화vo 가져와서 해당 영화 정보 모두 가져오기 (list) -->
  <select id="selectOneMovie" resultType="com.whychapedia.vo.MovieVo">
		SELECT * FROM movie WHERE id =#{movie_id}
            
 
  </select>

     <!--해당 영화 같은 장르 영화 리스트 #개 가져오기 -->
  <select id="selectMovieWithSameGenre" resultType="com.whychapedia.vo.MovieVo">
		  SELECT m.id,m.movie_kor_title,m.movie_rating,m.movie_post_url,m.movie_total_audience
  				FROM movie_genre mg
  				JOIN movie m ON mg.movie_id = m.id
  				WHERE mg.genre_id = #{genre_id}
  				AND m.movie_post_url != '0'
  				AND ROWNUM &lt;= #{num}
            
 
  </select>
   <!--검색해서 관련 영화 리스트 가져오기 한글 제목&영어제목&감독이름&배우이름과 연관된 영화들-->
  <select id="selectSearchMovieAll" resultType="com.whychapedia.vo.MovieVo">
	SELECT DISTINCT m.*
		FROM movie m
		INNER JOIN movie_director md ON m.ID = md.MOVIE_ID
		INNER JOIN director d ON md.DIRECTOR_ID = d.ID
		INNER JOIN movie_actor ma ON m.ID = ma.MOVIE_ID
		INNER JOIN actor a ON ma.ACTOR_ID = a.ID
		WHERE d.DIRECTOR_NAME LIKE '%' || #{searchKeyword} || '%'
		OR a.ACTOR_NAME LIKE '%' || #{searchKeyword} || '%'
		OR (REPLACE(MOVIE_KOR_TITLE, ' ', '') LIKE '%' || #{searchKeyword} || '%'
		OR REPLACE(MOVIE_ORIGINAL_TITLE, ' ', '') LIKE '%' || #{searchKeyword} || '%')
  </select>
  
 <!--해당 배우id의 출연영화 정보 모두 가져오기  -->
  <select id="selectActorPersonMovieAll" resultType="com.whychapedia.vo.MovieVo">
    SELECT m.*
	FROM actor a
	INNER JOIN movie_actor ma ON a.ID = ma.ACTOR_ID
	INNER JOIN movie m ON ma.MOVIE_ID = m.ID
	WHERE a.ID = #{actor_id}
  </select>
  <!--해당 감독 id의 출연영화 정보 모두 가져오기  -->
  <select id="selectDirectorPersonMovieAll" resultType="com.whychapedia.vo.MovieVo">
    SELECT m.*
	FROM director d
	INNER JOIN movie_director md ON d.ID = md.DIRECTOR_ID
	INNER JOIN movie m ON md.MOVIE_ID = m.ID
	WHERE d.ID = #{director_id}
  </select>
  
  
  <!--유저가 평가한 영화 모두 들고오기 + 영화 정보까지 다 들고 오기-->
	<select id="selectMovieStarRate" resultType="com.whychapedia.vo.MovieVo">
 		SELECT m.movie_post_url,m.movie_kor_title,m.movie_rating,m.id
			FROM star_rate sr
			JOIN Movie m ON sr.movie_id = m.id
			WHERE sr.user_id =#{user_id}
	</select>
	
  <!--유저가 보고싶은/보는중 영화 모두 들고오기 + 영화 정보까지 다 들고 오기-->
	<select id="selectMovieWatchList" resultType="com.whychapedia.vo.MovieVo">
           SELECT m.movie_post_url,m.movie_kor_title,m.movie_rating,m.id
			FROM watch_list wl
			JOIN Movie m ON wl.movie_id = m.id
			WHERE wl.user_id =#{user_id} and wl.watch_list_type=#{type}
	</select>
	
  <!--유저가 보는 중인 or 보고싶은 영화 모두 들고오기 + 영화 정보까지 다 들고 오기 (부분 개수만 들고오기)-->
	<select id="selectPartOfMovieStarRate" resultType="com.whychapedia.vo.MovieVo">
 		SELECT m.movie_post_url,m.movie_kor_title,m.movie_rating,m.id
			FROM star_rate sr
			JOIN Movie m ON sr.movie_id = m.id
			WHERE sr.user_id =#{user_id}
			FETCH FIRST #{theNum} ROWS ONLY
	</select>
	
		
	 <!--평가할 영화 (랜덤 기준으로) 다 들고 오기 (10)개만-->
	<select id="selectMovieRandomRate" resultType="com.whychapedia.vo.MovieVo">
		SELECT *
			FROM movie
			WHERE id NOT IN (SELECT movie_id FROM star_rate where user_id=#{user_id})
	        FETCH FIRST 10 ROWS ONLY
	</select>
	
		 <!--평가할 영화 (개봉일 기준으로) 다 들고 오기 (10)개만-->
	<select id="selectMovieReleaseRate" resultType="com.whychapedia.vo.MovieVo">
		SELECT *
			FROM movie
			WHERE id NOT IN (SELECT movie_id FROM star_rate where user_id=#{user_id})
	        order by MOVIE_RELEASE_DATE DESC FETCH FIRST 10 ROWS ONLY 
	</select>
	
	 <!--평가할 영화 (평점 높은 기준으로)들고 오기 (10개만)-->
	<select id="selectMovieHighRate" resultType="com.whychapedia.vo.MovieVo">
		SELECT *
			FROM movie
			WHERE id NOT IN (SELECT movie_id FROM star_rate where user_id=#{user_id})
	        order by MOVIE_RATING DESC FETCH FIRST 10 ROWS ONLY 
	</select>
	
	<!--두 사람이 모두 높게 평가한 영화 가져오기-->
	<select id="selectHighScoreForBothUser" resultType="com.whychapedia.vo.MovieVo">
		SELECT * FROM (
		    SELECT
		        M.ID,
		        M.movie_kor_title,
		        M.movie_POST_URL,
		        M.movie_rating
		    FROM
		        MOVIE M
		        JOIN STAR_RATE SR1 ON M.ID = SR1.MOVIE_ID
		        JOIN STAR_RATE SR2 ON M.ID = SR2.MOVIE_ID
		    WHERE
		        SR1.USER_ID = #{user_id}
		        AND SR1.SCORE >= 4
		        AND SR2.USER_ID = #{loginId}
		        AND SR2.SCORE >= 4
		    ORDER BY
		        M.ID
		   ) WHERE ROWNUM <![CDATA[<=]]> 3
	</select>
	
	
	
	
  
  
  
  </mapper>